import asyncio
import logging
import requests
from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.filters import CommandStart

API_TOKEN = '7924465298:AAHk7ToscQx56Ue7c3c4ksSUn1MnhdH2V7A'

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

class OrderState(StatesGroup):
    waiting_for_price = State()
    waiting_for_shipping = State()

# –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –∫–Ω–æ–ø–∫–∏ "–°–≤—è–∑—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"
main_menu = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä")],
    [KeyboardButton(text="üõç –ú–∞–≥–∞–∑–∏–Ω", web_app=types.WebAppInfo(url="https://dolcedeals.ru"))],
    [KeyboardButton(text="üåê –ù–∞—à–∏ —Ä–µ—Å—É—Ä—Å—ã"), KeyboardButton(text="‚ÑπÔ∏è –û –Ω–∞—Å")],
    [KeyboardButton(text="‚ùì FAQ")],
    [KeyboardButton(text="üí¨ –°–≤—è–∑—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º")]
], resize_keyboard=True)

@dp.message(CommandStart())
async def start_handler(message: types.Message):
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *Dolce Deals* ‚Äî –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Å—å–µ—Ä–∂ –≤ –º–∏—Ä–µ –º–æ–¥—ã üñ§\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu,
        parse_mode="Markdown"
    )

@dp.message(F.text == "üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä")
async def start_calculation(message: types.Message, state: FSMContext):
    await message.answer("üí¨ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∂–µ–ª–∞–µ–º–æ–π –≤–µ—â–∏ –≤ –µ–≤—Ä–æ:")
    await state.set_state(OrderState.waiting_for_price)

@dp.message(OrderState.waiting_for_price)
async def process_price(message: types.Message, state: FSMContext):
    try:
        price = float(message.text.replace(',', '.'))
        await state.update_data(price=price)

        if price <= 300:
            options = ["–ü–æ—á—Ç–∞ (45 ‚Ç¨)", "EMS (55 ‚Ç¨)", "–ö—É—Ä—å–µ—Ä (70 ‚Ç¨)"]
        else:
            options = ["–ö—É—Ä—å–µ—Ä (70 ‚Ç¨)"]

        builder = ReplyKeyboardBuilder()
        for opt in options:
            builder.add(KeyboardButton(text=opt))
        await message.answer(
            "üì¶ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏:\n\n"
            "–ü–æ—á—Ç–∞ - –±—é–¥–∂–µ—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ –Ω–µ —Å–ø–µ—à–∏—Ç. –î–æ—Å—Ç–∞–≤–∫–∞ –∑–∞–Ω–∏–º–∞–µ—Ç –æ—Ç 10 –¥–æ 18 –¥–Ω–µ–π.\n"
            "EMS - –ø–æ—á—Ç–æ–≤–æ–µ —ç–∫—Å–ø—Ä–µ—Å—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ. –î–æ—Å—Ç–∞–≤–∫–∞ –∑–∞–Ω–∏–º–∞–µ—Ç –æ—Ç 4 –¥–æ 10 –¥–Ω–µ–π.\n"
            "–ö—É—Ä—å–µ—Ä - –í–∞—à–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –Ω–∞—à–µ–º—É –∫—É—Ä—å–µ—Ä—É, –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ–¥–∞—Å—Ç –í–∞–º –ø–æ—Å—ã–ª–∫—É –ª–∏—á–Ω–æ –≤ —Ä—É–∫–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç –ø–æ –†–æ—Å—Å–∏–∏ –ª—é–±—ã–º —É–¥–æ–±–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º.",
            reply_markup=builder.as_markup(resize_keyboard=True, one_time_keyboard=True)
        )
        await state.set_state(OrderState.waiting_for_shipping)
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 250.50")

@dp.message(OrderState.waiting_for_shipping)
async def process_shipping(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    price = user_data.get("price")

    delivery_map = {
        "–ü–æ—á—Ç–∞ (45 ‚Ç¨)": 45,
        "EMS (55 ‚Ç¨)": 55,
        "–ö—É—Ä—å–µ—Ä (70 ‚Ç¨)": 70
    }
    delivery_cost = delivery_map.get(message.text.strip(), 70)

    full_price = price + delivery_cost

    if full_price <= 300:
        commission = 0.15
    elif full_price <= 1000:
        commission = 0.10
    elif full_price <= 2000:
        commission = 0.09
    elif full_price <= 3500:
        commission = 0.08
    else:
        commission = 0.05

    total_eur = full_price * (1 + commission)
    eur_rate = get_eur_rate() + 3
    total_rub = int(total_eur * eur_rate)

    await message.answer(
        f"‚úÖ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç:\n\n"
        f"üíµ –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ: *{total_rub:,} ‚ÇΩ*"
        .replace(",", " "),
        parse_mode="Markdown"
    )

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
    buttons = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑")],
            [KeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")]
        ], resize_keyboard=True, one_time_keyboard=True
    )
    await message.answer("–ï—Å–ª–∏ –≤–∞—Å —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ä–∞—Å—á–µ—Ç, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ –∏–∑ –¥–µ–π—Å—Ç–≤–∏–π –Ω–∏–∂–µ:", reply_markup=buttons)

    await state.clear()

def get_eur_rate():
    try:
        response = requests.get("https://www.cbr-xml-daily.ru/daily_json.js")
        data = response.json()
        return data["Valute"]["EUR"]["Value"]
    except:
        return 100

@dp.message(F.text == "üõç –ú–∞–≥–∞–∑–∏–Ω")
async def open_site(message: types.Message):
    await message.answer("–í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω: https://dolcedeals.ru")

@dp.message(F.text == "üåê –ù–∞—à–∏ —Ä–µ—Å—É—Ä—Å—ã")
async def resources(message: types.Message):
    await message.answer(
        "–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏:\n\n"
        "üîó –ù–∞—à Telegram-–∫–∞–Ω–∞–ª: https://t.me/dolcedeals\n"
        "üì∏ Instagram: https://www.instagram.com/dolce_deals\n"
        "üåç –°–∞–π—Ç: https://dolcedeals.ru\n"
        "üìå Tik-Tok: https://www.tiktok.com/@dolce.deals"
    )

@dp.message(F.text == "‚ÑπÔ∏è –û –Ω–∞—Å")
async def about_us(message: types.Message):
    await message.answer(
        "üñ§ *Dolce Deals* ‚Äî —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ–π –∏ –≤—ã–≥–æ–¥–Ω—ã–π —à–æ–ø–∏–Ω–≥, –∫–æ—Ç–æ—Ä—ã–π –º—ã —Å –í–∞–º–∏ —Ç–∞–∫ –ª—é–±–∏–º.\n\n"
        "–ù–∞—à —Å–µ—Ä–≤–∏—Å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —É–∂–µ –±–æ–ª–µ–µ –¥–≤—É—Ö –ª–µ—Ç –∏ —Å –ª—ë–≥–∫–æ—Å—Ç—å—é —Å–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –¥–∞–∂–µ —Å —Å–∞–º—ã–º–∏ –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º–∏ –∑–∞–∫–∞–∑–∞–º–∏.\n\n"
        "–ö–æ–º–∞–Ω–¥–∞ Dolce Deals –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–∂–µ–π –ª–∏–º–∏—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –æ–¥–µ–∂–¥—ã —Å 2016 –≥–æ–¥–∞, –º—ã –∑–Ω–∞–µ–º, –≥–¥–µ –∏—Å–∫–∞—Ç—å, –∫–∞–∫ –≤—ã–≥–æ–¥–Ω–æ –∫—É–ø–∏—Ç—å –∏ –∫–∞–∫ –¥–æ—Å—Ç–∞–≤–∏—Ç—å.",
        parse_mode="Markdown"
    )

@dp.message(F.text == "‚ùì FAQ")
async def faq(message: types.Message):
    await message.answer(
        "üõç *–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–µ—Ä–≤–∏—Å Dolce Deals:*\n\n"
        "1. –í—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ –∂–µ–ª–∞–µ–º—É—é –≤–µ—â—å ‚Äî —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Å—ã–ª–∫–∞, —Ñ–æ—Ç–æ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ–ø–∏—Å–∞–Ω–∏–µ.\n"
        "2. –ú—ã –Ω–∞—Ö–æ–¥–∏–º —Ç–æ–≤–∞—Ä –∏ —É—Ç–æ—á–Ω—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω—É–∂–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞.\n"
        "3. –û–±—Å—É–∂–¥–∞–µ–º —Å –í–∞–º–∏ —Å–ø–æ—Å–æ–±—ã –∏ —Å—Ä–æ–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏.\n"
        "4. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å.\n"
        "5. –ï—Å–ª–∏ –í–∞—Å –≤—Å—ë —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç ‚Äî –í—ã –ø–µ—Ä–µ–≤–æ–¥–∏—Ç–µ –æ–∑–≤—É—á–µ–Ω–Ω—É—é —Å—É–º–º—É.\n"
        "6. –ú—ã —Å–æ–≤–µ—Ä—à–∞–µ–º –≤—ã–∫—É–ø –∏ –æ—Ç—á–∏—Ç—ã–≤–∞–µ–º—Å—è –ø–µ—Ä–µ–¥ –í–∞–º–∏.\n"
        "7. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –∏ –æ—Å—Ç–∞—ë–º—Å—è –Ω–∞ —Å–≤—è–∑–∏ –¥–æ –º–æ–º–µ–Ω—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è.\n\n"
        "üí¨ –ù–∞ –∫–∞–∂–¥–æ–º —ç—Ç–∞–ø–µ —Å –í–∞–º–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä.",
        parse_mode="Markdown"
    )

@dp.message(F.text == "üí¨ –°–≤—è–∑—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º")
async def contact_manager(message: types.Message):
    await message.answer("–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –º–æ–∂–Ω–æ –ø–æ —Å—Å—ã–ª–∫–µ: [@dolcedealsmanager](https://t.me/dolcedealsmanager)", parse_mode="Markdown")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑"
@dp.message(F.text == "–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑")
async def make_order(message: types.Message):
    await message.answer("–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º: [@dolcedealsmanager](https://t.me/dolcedealsmanager)", parse_mode="Markdown")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"
@dp.message(F.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")
async def back_to_menu(message: types.Message):
    await message.answer(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu
    )

async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())





